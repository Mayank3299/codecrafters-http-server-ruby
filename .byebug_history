q
        content_length = request.find { |header| header.start_with?('Content-Length:') }.split(' ').last.to_i
        content_length = request.find { |header| header.start_with?('Content-Length:') }
request.find('Content-Length')
        content_length = request.find('Content-Length').to_i
request
request_line
request
request.join.split("\r\n")
  request_line = request.first.split(' ')
  request_method = request_line[0]
  path = request_line[1]
socket.gets(5)
socket
request
q
socket.read(5)
socket.read
request.data
request
n
socket.puts "Kya be"
socket.puts "HTTP/1.1 404 Not Found\r\n\r\n"
file
file = (directory ? File.open("#{directory+filename}", 'r') : nil)
directory = ARGV[1]
filename = path.split('/').last
q
      file = (directory ? File.open("#{directory+filename}", 'r') : nil)
ARGV[5]
ARGV[1]
directory
q
file.size
"HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: #{file}\r\n\r\n#{file.read}"
file = File.open("#{directory+filename}", 'r')
directory = ARGV[1]
q
file = File.read("#{directory+filename}").read
file = File.read("#{directory+filename}")
directory = ARGV[1]
q
a
1
file = File.open("#{directory+filename}", 'w').write
file = File.open("#{directory+filename}", 'w').read
file = File.open("#{directory+filename}", 'r').read
file = File.open("#{directory+filename}", 'r')
file = File.open("#{directory+filename}", 'r').read
File.read("#{directory+filename}")
file = File.open("#{directory+filename}", r).read
directory = ARGV[1]
directory
file = File.open("#{directory+filename}", r).read
directory = ARGV[1]
   34:       file = File.open("#{directory+filename}", r).read
q
File.open("#{directory + filename}", r)
ARGV
directory = ARGV[1]
filename = path.split('/').last
q
directory = ARGV[1]
filename = path.split('/').last
q
path.split('/')
path
q
ARGV
path.start_with?('/files')
path
request
q
ua
request
q
request
ua
q
request.find{|ele| ele.start_with?('User-Agent')}.split(': ').last
request.find{|ele| ele.start_with?('User-Agent')}.split(': ')
request.find{|ele| ele.start_with?('User-Agent')}.to_h
request.find{|ele| ele.start_with?('User-Agent')}
_.to_h
request.find{|ele| ele.start_with?('User-Agent')}
request.find{|ele| ele.start_with?('User')}
request.find{|ele| ele.start_with?('Host')}
request.select{|ele| ele.start_with?('Host')}
request.first.split(' ')
request = request.join.split("\r\n")
request.join.split("\r\n")
request.join(' ').split("\r\n")
request.join(' ').split('\r\n')
request.join.split('\r\n')
request.join
request
q
request
q
request.join.split("\r\n")[1..]
request.join.split("\r\n")[1..].to_h
request.join.split("\r\n")[1..]
request.join.split("\r\n")[1..].to_h
request.join.split("\r\n")
request.join
request
request_line[1].start_with?('/user-agent')
request_line = request.first.split(' ')
request
q
request_line[1].start_with?('/echo')
request_line = request.first.split(' ')
q
request_line[1].start_with?('/echo')
request_line = request.first
request
q
request
q
request
q
request
q
request
q
request
q
a
request.inspect
request.header
request.headers
request.env
request.methods
request.headers
request
q
request
q
"HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: 3\r\n\r\n#{request[1][6..]}"
request[1].start_with?('/echo')
  client_socket.puts "HTTP/1.1 200 OK\r\n
request
q
"HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: 3\r\n\r\n#{request[1][6..]}"
request[1].start_with?('/echo')
request
q
request
q
request.split(" ")
request
q
e
request
curl -v http://localhost:4221/abcdefg
